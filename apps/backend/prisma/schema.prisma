
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String        @id
  expiresAt DateTime
  token     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String       @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt

  @@map("verification")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  // Custom fields
  posts         Post[]
  comments      Comment[]

  @@unique([email])
  @@map("user")
}

/*
 *   Custom models
 */

model Group {
  id          String    @id
  
  name        String
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Category {
  id          String    @id
  
  name        String
  description String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Post {
  id          String    @id
  userId      String

  name        String
  description String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String    @id
  userId      String

  name        String
  description String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}