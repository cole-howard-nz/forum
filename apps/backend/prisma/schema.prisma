
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String        @id
  expiresAt DateTime
  token     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String       @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt

  @@map("verification")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // BetterAuth attributes
  sessions      Session[]
  accounts      Account[]

  // Forum attributes
  posts         Post[]
  comments      Comment[]
  votes         Vote[]

  // RBAC attributes
  role          Role?     @relation(fields: [roleId], references: [id])
  roleId        String?

  @@unique([email])
  @@map("user")
}

/*
 *   Custom models
 */

model Role {
  id          String        @id
  
  name        String
  title       String

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  permissions Permission[] @relation(name: "PermissionToRole")
  users       User[]
}

model Permission {
  id          String       @id
  
  node        String    

  createdAt   DateTime     @default(now())

  roles        Role[]      @relation(name: "PermissionToRole")
}

model Group {
  id          String       @id
  
  name        String
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  categories  Category[]
}

model Category {
  id          String    @id
  groupId     String?
  
  name        String
  description String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  group       Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Post {
  id          String    @id
  userId      String
  categoryId  String

  title       String
  content     String?   @db.Text

  isPinned    Boolean   @default(false) 
  isLocked    Boolean   @default(false)
  viewCount   Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]

  @@index([userId])
  @@index([createdAt])
  @@index([categoryId])

}

model Comment {
  id          String    @id
  userId      String
  postId      String    
  parentId    String?   // Nested replies

  content     String    @db.Text

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade) 
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade) 
  replies     Comment[] @relation("CommentReplies") 
  votes       Vote[]

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

enum VoteEnum {
  LIKE
  DISLIKE
}

model Vote {
  id          String    @id @default(cuid())
  userId      String
  postId      String?
  commentId   String?
  type        VoteEnum
  
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])    // One vote, per user, per post
  @@unique([userId, commentId]) // One vote, per user, per comment
  @@index([postId])
  @@index([commentId])
  @@map("vote")
}